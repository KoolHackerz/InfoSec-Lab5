// S-box for SubBytes operation
const SBOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
];

// Inverse S-box for decryption
const INV_SBOX: [u8; 256] = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
];

// Constants for round key generation
const RCON: [u8; 11] = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

/// Structure for storing AES state
struct AesState {
    state: [[u8; 4]; 4],
}

impl AesState {
    fn new(block: &[u8]) -> Self {
        let mut state = [[0u8; 4]; 4];
        for i in 0..4 {
            for j in 0..4 {
                state[j][i] = block[i * 4 + j];
            }
        }
        AesState { state }
    }

    fn to_bytes(&self) -> [u8; 16] {
        let mut output = [0u8; 16];
        for i in 0..4 {
            for j in 0..4 {
                output[i * 4 + j] = self.state[j][i];
            }
        }
        output
    }

    // SubBytes: byte substitution through S-box
    fn sub_bytes(&mut self) {
        for i in 0..4 {
            for j in 0..4 {
                self.state[i][j] = SBOX[self.state[i][j] as usize];
            }
        }
    }

    // InvSubBytes: inverse substitution
    fn inv_sub_bytes(&mut self) {
        for i in 0..4 {
            for j in 0..4 {
                self.state[i][j] = INV_SBOX[self.state[i][j] as usize];
            }
        }
    }

    // ShiftRows: cyclic row shift
    fn shift_rows(&mut self) {
        // Row 0: no shift
        // Row 1: shift 1 left
        let temp = self.state[1][0];
        self.state[1][0] = self.state[1][1];
        self.state[1][1] = self.state[1][2];
        self.state[1][2] = self.state[1][3];
        self.state[1][3] = temp;

        // Row 2: shift 2 left
        let temp1 = self.state[2][0];
        let temp2 = self.state[2][1];
        self.state[2][0] = self.state[2][2];
        self.state[2][1] = self.state[2][3];
        self.state[2][2] = temp1;
        self.state[2][3] = temp2;

        // Row 3: shift 3 left (or 1 right)
        let temp = self.state[3][3];
        self.state[3][3] = self.state[3][2];
        self.state[3][2] = self.state[3][1];
        self.state[3][1] = self.state[3][0];
        self.state[3][0] = temp;
    }

    // InvShiftRows: inverse row shift
    fn inv_shift_rows(&mut self) {
        // Row 1: shift 1 right
        let temp = self.state[1][3];
        self.state[1][3] = self.state[1][2];
        self.state[1][2] = self.state[1][1];
        self.state[1][1] = self.state[1][0];
        self.state[1][0] = temp;

        // Row 2: shift 2 right
        let temp1 = self.state[2][3];
        let temp2 = self.state[2][2];
        self.state[2][3] = self.state[2][1];
        self.state[2][2] = self.state[2][0];
        self.state[2][1] = temp1;
        self.state[2][0] = temp2;

        // Row 3: shift 3 right (or 1 left)
        let temp = self.state[3][0];
        self.state[3][0] = self.state[3][1];
        self.state[3][1] = self.state[3][2];
        self.state[3][2] = self.state[3][3];
        self.state[3][3] = temp;
    }

    // MixColumns: column mixing
    fn mix_columns(&mut self) {
        for i in 0..4 {
            let s0 = self.state[0][i];
            let s1 = self.state[1][i];
            let s2 = self.state[2][i];
            let s3 = self.state[3][i];

            self.state[0][i] = gmul(s0, 2) ^ gmul(s1, 3) ^ s2 ^ s3;
            self.state[1][i] = s0 ^ gmul(s1, 2) ^ gmul(s2, 3) ^ s3;
            self.state[2][i] = s0 ^ s1 ^ gmul(s2, 2) ^ gmul(s3, 3);
            self.state[3][i] = gmul(s0, 3) ^ s1 ^ s2 ^ gmul(s3, 2);
        }
    }

    // InvMixColumns: inverse column mixing
    fn inv_mix_columns(&mut self) {
        for i in 0..4 {
            let s0 = self.state[0][i];
            let s1 = self.state[1][i];
            let s2 = self.state[2][i];
            let s3 = self.state[3][i];

            self.state[0][i] = gmul(s0, 14) ^ gmul(s1, 11) ^ gmul(s2, 13) ^ gmul(s3, 9);
            self.state[1][i] = gmul(s0, 9) ^ gmul(s1, 14) ^ gmul(s2, 11) ^ gmul(s3, 13);
            self.state[2][i] = gmul(s0, 13) ^ gmul(s1, 9) ^ gmul(s2, 14) ^ gmul(s3, 11);
            self.state[3][i] = gmul(s0, 11) ^ gmul(s1, 13) ^ gmul(s2, 9) ^ gmul(s3, 14);
        }
    }

    // AddRoundKey: XOR with round key
    fn add_round_key(&mut self, round_key: &[u8]) {
        for i in 0..4 {
            for j in 0..4 {
                self.state[j][i] ^= round_key[i * 4 + j];
            }
        }
    }
}

/// Galois Field GF(2^8) multiplication
fn gmul(mut a: u8, mut b: u8) -> u8 {
    let mut p = 0u8;
    for _ in 0..8 {
        if b & 1 != 0 {
            p ^= a;
        }
        let hi_bit_set = a & 0x80 != 0;
        a <<= 1;
        if hi_bit_set {
            a ^= 0x1b; // x^8 + x^4 + x^3 + x + 1
        }
        b >>= 1;
    }
    p
}

/// Round key generation (Key Expansion)
pub fn key_expansion(key: &[u8; 16]) -> [[u8; 16]; 11] {
    let mut round_keys = [[0u8; 16]; 11];

    // First round key is the key itself
    round_keys[0].copy_from_slice(key);

    for i in 1..11 {
        let mut temp = [0u8; 4];

        // Take last 4 bytes of previous key
        for j in 0..4 {
            temp[j] = round_keys[i - 1][12 + j];
        }

        // RotWord and SubWord
        let t = temp[0];
        temp[0] = SBOX[temp[1] as usize];
        temp[1] = SBOX[temp[2] as usize];
        temp[2] = SBOX[temp[3] as usize];
        temp[3] = SBOX[t as usize];

        // XOR with Rcon
        temp[0] ^= RCON[i];

        // Generate new round key
        for j in 0..4 {
            round_keys[i][j] = round_keys[i - 1][j] ^ temp[j];
        }

        for j in 4..16 {
            round_keys[i][j] = round_keys[i - 1][j] ^ round_keys[i][j - 4];
        }
    }

    round_keys
}

/// AES block encryption
pub fn aes_encrypt_block(block: &[u8], round_keys: &[[u8; 16]; 11]) -> [u8; 16] {
    let mut state = AesState::new(block);

    // Initial round
    state.add_round_key(&round_keys[0]);

    // Main rounds (1-9)
    for round in 1..10 {
        state.sub_bytes();
        state.shift_rows();
        state.mix_columns();
        state.add_round_key(&round_keys[round]);
    }

    // Final round (10)
    state.sub_bytes();
    state.shift_rows();
    state.add_round_key(&round_keys[10]);

    state.to_bytes()
}

/// AES block decryption
pub fn aes_decrypt_block(block: &[u8], round_keys: &[[u8; 16]; 11]) -> [u8; 16] {
    let mut state = AesState::new(block);

    // Initial round
    state.add_round_key(&round_keys[10]);

    // Main rounds (9-1)
    for round in (1..10).rev() {
        state.inv_shift_rows();
        state.inv_sub_bytes();
        state.add_round_key(&round_keys[round]);
        state.inv_mix_columns();
    }

    // Final round (0)
    state.inv_shift_rows();
    state.inv_sub_bytes();
    state.add_round_key(&round_keys[0]);

    state.to_bytes()
}

/// Parse key from hex string
pub fn parse_key(key_hex: &str) -> Result<[u8; 16], String> {
    let key_bytes = hex::decode(key_hex)
        .map_err(|e| format!("Invalid key format (must be hex): {}", e))?;

    if key_bytes.len() != 16 {
        return Err(format!(
            "Invalid key length: {} bytes (required 16 bytes for AES-128)",
            key_bytes.len()
        ));
    }

    let mut key = [0u8; 16];
    key.copy_from_slice(&key_bytes);
    Ok(key)
}
